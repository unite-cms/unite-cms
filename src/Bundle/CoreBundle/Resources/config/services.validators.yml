# Contains all custom validators.
services:

  # Checks, that a fieldType is available.
  UniteCMS\CoreBundle\Validator\Constraints\FieldTypeValidator:
    tags: [validator.constraint_validator]
    arguments: ['@unite.cms.field_type_manager']
    public: false

  # Checks, that a viewType is available.
  UniteCMS\CoreBundle\Validator\Constraints\ViewTypeValidator:
    tags: [validator.constraint_validator]
    arguments: ['@unite.cms.view_type_manager']
    public: false

  # Checks, that the fieldableContent (content or setting) data is valid according to the contentType / settingType definition.
  UniteCMS\CoreBundle\Validator\Constraints\ValidFieldableContentDataValidator:
    tags: [validator.constraint_validator]
    arguments: ['@unite.cms.field_type_manager', '@doctrine.orm.entity_manager']
    public: false

  # Checks, that the field setting data is valid by asking the corresponding fieldType.
  UniteCMS\CoreBundle\Validator\Constraints\ValidFieldSettingsValidator:
    tags: [validator.constraint_validator]
    arguments: ['@unite.cms.field_type_manager']
    public: false

  # Checks, that the view setting data is valid by asking the corresponding viewType.
  UniteCMS\CoreBundle\Validator\Constraints\ValidViewSettingsValidator:
    tags: [validator.constraint_validator]
    arguments: ['@unite.cms.view_type_manager']
    public: false

  # Checks, that the view setting data is valid by asking the corresponding viewType.
  UniteCMS\CoreBundle\Validator\Constraints\ValidContentTranslationOfValidator:
    tags: [validator.constraint_validator]
    arguments: ['@doctrine.orm.entity_manager']
    public: false

  # Checks, that each organization has at least one admin member.
  UniteCMS\CoreBundle\Validator\Constraints\OrganizationAdminPresentValidator:
    tags: [validator.constraint_validator]
    arguments: ['@doctrine.orm.entity_manager']
    public: false

  # Checks, that an identifier only contains valid characters.
  UniteCMS\CoreBundle\Validator\Constraints\ValidIdentifierValidator:
    tags: [validator.constraint_validator]
    arguments: ['%identifier_pattern%']
    public: false

  # Checks, that a GraphQL query for a fieldable (content or setting) is valid.
  UniteCMS\CoreBundle\Validator\Constraints\ValidGraphQLQueryValidator:
    tags: [validator.constraint_validator]
    public: false

  # Checks, that Fieldable validations are valid
  UniteCMS\CoreBundle\Validator\Constraints\ValidValidationsValidator:
    tags: [validator.constraint_validator]
    arguments: ['@doctrine.orm.entity_manager']
    public: false

  # Checks, that a webhook condition is valid
  UniteCMS\CoreBundle\Validator\Constraints\ValidWebhookConditionValidator:
    tags: [validator.constraint_validator]
    arguments: ['@doctrine.orm.entity_manager']
    public: false